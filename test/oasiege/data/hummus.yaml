swagger: "2.0"

info:
  version: "0.1"
  title: Lookup Service Api

basePath: /bongo

paths:
  /:
    get:
      summary: Application root
      operationId: org.myproject.system.http/redirect-to-swagger-ui
      security:
          - oauth2: [uid]
      responses:
          default:
              description: Redirect to /ui/

  /quality-label/{key}:
    get:
      summary: Returns the QL history
      operationId: org.myproject.system.api/get-events-by-key
      security:
          - oauth2: [uid]
      parameters:
        - name: key
          in: path
          required: true
          type: string
          pattern: "[a-zA-Z_0-9]+"
      responses:
          200:
              description: A list of events for the given key
          401:
              description: Unauthorized access
          404:
              description: No data found for key

  /cucumber-number/{key}:
    get:
      summary: Returns the cucumber event history
      operationId: org.myproject.system.api/get-events-by-key
      security:
          - oauth2: [uid]
      parameters:
        - name: key
          in: path
          required: true
          type: string
          pattern: "[0-9]+"
      responses:
          200:
              description: A list of events for the given key
          401:
              description: Unauthorized access
          404:
              description: No data found for key

  /other-number/{key}:
    get:
      summary: Returns event history for number
      operationId: org.myproject.system.api/get-events-by-key
      security:
          - oauth2: [uid]
      parameters:
        - name: key
          in: path
          required: true
          type: string
          pattern: "[0-9]+"
      responses:
          200:
              description: A list of events for the given key
          401:
              description: Unauthorized access
          404:
              description: No data found for key

  /event-types/{name}/events:
    post:
      summary: Store event
      operationId: org.myproject.system.api/write-events
      consumes:
        - application/json
      security:
        - oauth2: [hummus.event.write]
      parameters:
        - name: name
          in: path
          type: string
          required: true
          description: Name of the event type.
          pattern: '^\w+\.e([0-9a-fA-F]+)_.*$'
        - name: events
          in: body
          schema:
              type: array
              items:
                $ref: '#/definitions/BusinessEvent'
      responses:
          200:
              description: Events are processed
          401:
              description: Unauthorized access

definitions:
  EventMetadata:
    type: object
    description: |
      Metadata for this Event.
      Contains commons fields for both Business and DataChange Events. Most are enriched by Nakadi upon
      reception, but they in general MIGHT be set by the client.
    properties:
      metadata:
        type: object
        properties:
          eid:
            description: |
              Identifier of this Event.
            type: string
            format: uuid
            example: '105a76d8-db49-4144-ace7-e683e8f4ba46'
          event_type:
            description: |
              The EventType of this Event.
            type: string
            example: 'crobag:payment-event'
          occurred_at:
            description: |
              Timestamp of creation of the Event generated by the producer.
            type: string
            format: date-time
        #additionalProperties: false
        required:
          - occurred_at
          - eid

    required:
      - metadata

  BusinessEvent:
    type: object
    description: |
      A Business Event.
    allOf:
      - $ref: '#/definitions/EventMetadata'
    #additionalProperties: true

securityDefinitions:
  oauth2:
    type: oauth2
    flow: implicit
    authorizationUrl: https://example.com/oauth2/dialog
    scopes:
      uid: Unique identifier of the user accessing the service.

